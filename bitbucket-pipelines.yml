pipelines:
  branches:
    master:
        - step:
           # size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - export DOCKER_BUILDKIT=0
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            #size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export PORT=80
            - export DNS=$DEPLOYNAME.k8s.sandboxaddis.com
            - export TLS=${DEPLOYNAME}-$BITBUCKET_BRANCH-${BITBUCKET_BUILD_NUMBER}-tls
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud container clusters get-credentials $K8s_CLUSTER_NAME --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{cert}}|$TLS|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - kubectl apply -n live -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker
    development:
        - step:
            size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - export IMAGE_NAME=$DOCKERHUB_NAMESPACE/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export DNS=dev-$DEPLOYNAME.sandboxaddis.com
            - export PORT=80
            - export IMAGE_NAME=$DOCKERHUB_NAMESPACE/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - echo "$KUBE_CONFIG" | base64 -di > ~/.kubeconfig.yml
            - export KUBECONFIG=~/.kubeconfig.yml
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - kubectl apply -n hadmin -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker

    staging:
        - step:
            #size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - export DOCKER_BUILDKIT=0
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            #size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export DNS=$DEPLOYNAME.staging.k8s.sandboxaddis.com
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - export PORT=80
            - export TLS=${DEPLOYNAME}-$BITBUCKET_BRANCH-${BITBUCKET_BUILD_NUMBER}-tls
            - gcloud container clusters get-credentials $K8s_CLUSTER_NAME --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - sed -i "s|{{cert}}|$TLS|g" deployment.yml
            - kubectl apply -n hadmin -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker
    wingu-prod:
        - step:
            runs-on:
            - self.hosted
            - linux.shell
            - hrl
            - mfr
            name: Build & Run
            script:
            - export DOCKER_HOST=""
            - export IMAGE_NAME=$BITBUCKET_REPO_SLUG-${BITBUCKET_BRANCH}
            - docker build -t $IMAGE_NAME:${BITBUCKET_BUILD_NUMBER} .
            - docker stop $IMAGE_NAME || true && docker rm $IMAGE_NAME || true
            - docker run -d --restart=always -p 3000:80 --name $IMAGE_NAME $IMAGE_NAME:${BITBUCKET_BUILD_NUMBER}
definitions:
  services:
    docker:
      memory: 6104