pipelines:
  branches:
    master:
        - step:
           # size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            #size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export PORT=80
            - export DNS=$DEPLOYNAME.k8s.sandboxaddis.com
            - export TLS=${DEPLOYNAME}-$BITBUCKET_BRANCH-${BITBUCKET_BUILD_NUMBER}-tls
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - gcloud container clusters get-credentials $K8s_CLUSTER_NAME --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{cert}}|$TLS|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - kubectl apply -n live -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker
    development:
        - step:
            #size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            #size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export DNS=$DEPLOYNAME.dev.k8s.sandboxaddis.com
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - export PORT=80
            - export TLS=${DEPLOYNAME}-$BITBUCKET_BRANCH-${BITBUCKET_BUILD_NUMBER}-tls
            - gcloud container clusters get-credentials $K8s_CLUSTER_NAME --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - sed -i "s|{{cert}}|$TLS|g" deployment.yml
            - kubectl apply -n hadmin -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker
    staging:
        - step:
            #size: 2x
            name: Build
            image: google/cloud-sdk:latest
            script:
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - docker login -u _json_key --password-stdin https://$DOCKER_GCR_REPO_URL < ~/.gcloud-api-key.json
            - docker build -t $IMAGE_NAME .
            - docker push $IMAGE_NAME
            services:
              - docker
        - step:
            #size: 2x
            name: Deploy
            image: google/cloud-sdk:latest
            script:
            - echo $GCLOUD_API_KEYFILE > ~/.gcloud-api-key.json
            - export DEPLOYNAME=${BITBUCKET_REPO_SLUG//_/}
            - export DNS=$DEPLOYNAME.staging.k8s.sandboxaddis.com
            - gcloud auth activate-service-account --key-file ~/.gcloud-api-key.json
            - export IMAGE_NAME=$DOCKER_GCR_REPO_URL/$GCLOUD_PROJECT_ID/$BITBUCKET_REPO_SLUG:${BITBUCKET_COMMIT}-${BITBUCKET_BUILD_NUMBER}-${BITBUCKET_BRANCH}
            - export PORT=80
            - export TLS=${DEPLOYNAME}-$BITBUCKET_BRANCH-${BITBUCKET_BUILD_NUMBER}-tls
            - gcloud container clusters get-credentials $K8s_CLUSTER_NAME --zone=$GCLOUD_ZONE --project $GCLOUD_PROJECT_ID
            - sed -i "s|{{image}}|$IMAGE_NAME|g" deployment.yml
            - sed -i "s|{{dns}}|$DNS|g" deployment.yml
            - sed -i "s|{{name}}|$DEPLOYNAME-$BITBUCKET_BRANCH|g" deployment.yml
            - sed -i "s|{{port}}|$PORT|g" deployment.yml
            - sed -i "s|{{cert}}|$TLS|g" deployment.yml
            - kubectl apply -n hadmin -f deployment.yml
            - echo "all done please visit https://$DNS"
            services:
              - docker
              
    moh:
      - step:
          #size: 2x
          name: Build & Deploy
          #runs-on: ihris.apps
          script:
          - 'echo ''cd HRLicensureFE'' >  ihrisscript.sh'
          - 'echo ''docker build -t hrl-fe:moh .'' >> ihrisscript.sh'
          - 'echo ''docker stop hrl-fe-moh || true && docker rm hrl-fe-moh || true'' >> ihrisscript.sh'
          - 'echo ''docker run -d --restart=always -p 1236:80 --name hrl-fe-moh hrl-fe:moh'' >> ihrisscript.sh'
          - pipe: atlassian/ssh-run:0.3.0
            variables:
              SSH_USER: $SSH_IHRIS_USER
              SERVER: $MOH_IHRIS_APPS
              SSH_KEY: $MOH_IHRIS_APPS_SSH_KEY
              MODE: 'script'
              COMMAND: 'ihrisscript.sh' 